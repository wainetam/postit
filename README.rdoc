** bit sloppy, but here's my answers to first week's quiz **

Rails Week 1 Quiz

  1. Why do they call it a relational database? Data in a table is organized via primary keys that uniquely identify each row in a table. Tables 'relate' to one another via a foreign key, a column of unique values that points to the primary keys of another table.
  2. What is SQL? Structured Query Language used to manage and query data held in a relational database
  3. There are two predominant views into a relational database. What are they, and how are they different? One view is to view the data as a table, similar to that in an Excel spreadsheet. Another view is to view each row of the table as an object that can be manipulated.
  4. In a table, what do we call the column that serves as the main identifier for a row of data? We're looking for the general database term, not the column name. Primary key.
  5. What is a foreign key, and how is it used? Foreign key is used to relate two separate tables, connecting the primary key of one table with the primary key of another.
  6. At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties. In ActiveRecord, objects carry both persistent data and behavior which operates on that data. ORM (Object-Relational Mapping) is a technique that connects the objects of an application to tables in a relational database. Using ORM, the properties and relationships of the objects in an application can be easily stored and retrieved from a database without writing SQL statements directly. Tables become classes, rows become objects, and columns are instance variables
  7. If there's an ActiveRecord model called "CrazyMonkey", what should the table name be? crazy_monkeys
  8. If I'm building a 1:M association between Project and Issue, what will the model associations and foreign key be? class Project has_many: issues // class Issue belongs_to: project // foreign key is project_id
  9. Given this code: 
  class Zoo < ActiveRecord::Base  
    has_many :animals
  end
  What do you expect the other model to be and what does database schema look like? The other model should be Animal with database schema of belongs_to :zoo
  What are the methods that are now available to a zoo to call related to animals? 
      * Zoo#animals(force_reload = false)
      * Zoo#animals<<(animal)
      * Zoo#animals.delete(animal)
      * Zoo#animals.destroy(animal)
      * Zoo#animals=objects
      * Zoo#animals.clear
      * Zoo#animals.empty?
      * Zoo#animals.size
      * Zoo#animals.find(...)
      * Zoo#animals.where(...)
      * Zoo#animals.exists?(...)
      * Zoo#animals.build(attributes = {}, ...)
      * Zoo#animals.create(attributes = {})
      * How do I create an animal called "jumpster" in a zoo called "San Diego Zoo"? sdzoo = Zoo.create(name: 'San Diego Zoo') // sdzoo.animals << Animal.create(name: 'jumpster')
  10. What is mass assignment? What's the non-mass assignment way of setting values? One can set multiple attributes at once (usually via a hash). The non-mass assignment way is setting values individually.
  11. What does this code do? Animal.first #returns the first object in the Animal model
  12. If I have a table called "animals" with columns called "name", and a model called Animal, how do I instantiate an animal object with name set to "Joe". Which methods makes sure it saves to the database? Animal.create(name: 'Joe') // create method  or .new and then .save
  13. How does a M:M association work at the database level? M:M usually works through a third model (join table) that links the two models that have an M:M association. That 'third' model belongs_to both of other two models, and the other two models use the method 'has_many :other_model'
  14. What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach? has_and_belongs_to_many and has_many :through // Pros for habtm -- don't need to create a separate join table. Cons for habtm -- can't add attributes to the join model // Pros for has_many :through -- can access attributes of each other's models. Cons -- need to create an explicit join table
  15. Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?
  set up a join table called memberships that belongs_to :group and belongs to :user. In the User model, has_many :memberships <\n> has_many :groups, through :group_user. In the Group model, has_many :memberships <\n> has_many :users, through :group_user
  
WEEK 2 QUIZ
Name all the 7 (or 8) routes exposed by the resources keyword in the routes.rb file. Also name the 4 named routes, and how the request is routed to the controller/action. The 7/8 routes are: Index, New, Create, Show, Edit, Update (patch/put), Destroy. The 4 named routes are: Index, New, Edit, Show. The request is routed to the controller/action by naming the route and adding an underscore _path to the named route and adding any necessary parameter. i.e., the named path for posts#index is posts_path()

What is REST and how does it relate to the resources routes?
REST is Representational State Transfer. It relies on a stateless communications protocol such as HTTP. It is generally an architectural style and philosophy that treats objects as resources to be created/edited/destroyed.

What's the major difference between model backed and non-model backed form helpers?
The major difference is that you can associate forms with objects directly with model-backed forms. With non-model backed forms, you are not accessing attributes of objects or the model. One such usage would be a general search form.

How does form_for know how to build the <form> element?
form_for yields a form builder object, typically specificed with an 'f' variable. Methods to create form controls are called on the form builder object 'f'.

What's the general pattern we use in the actions that handle submission of model-backed forms (ie, the create and udpate actions)?


How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?
Rails validations get triggered by create, editing, or updating actions. Active Record confirms that objects are valid before saving to the database. Errors get saved in an array associated with the object. To display the validation messages, we loop through `errors` array and call the `full_messages` method on each element (if any).

What are Rails helpers?
Helpers are methods that can be reused throughout the application.

What are Rails partials?
Rails partials allow you to reuse common HTML/erb code to DRY out your rails application.

When do we use partials vs helpers?
Helpers are methods that can be reused throughout the application. Partials are reusable code for views (HTML/erb code)

When do we use non-model backed forms?
When we want to create forms that do not access attributes of objects or the model. Such as search forms or general form/data  submission that doesn't touch any models.
  
  
  
